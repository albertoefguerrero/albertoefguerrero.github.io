#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+AUTHOR: Alberto Flores
#+EMAIL: albertoefg@outlook.com
#+DATE: <2020-12-12 sÃ¡b>
#+TITLE: Final Challenge
#+LANGUAGE: en
* - Kanban
|----------------------+------------------------+-----------------------------------|
| TODO                 | Doing                  | Done                              |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Learn about Architecture Diagrams |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Design Processes Diagram          |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Design Information Flow           |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Clone Repository                  |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Install docker, git and go        |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Learn about Go toolchain          |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Play with code from repository    |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Run code and tests on docker      |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Fix Docker image                  |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Docker: Jenkins and BlueOcean     |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Simple BlueOcean pipeline         |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Pipeline: Build step              |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Pipeline: Testing step            |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Custom docker image with Go       |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Jenkins Webhook                   |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Learn about Sonar Qube            |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Install sonarqube                 |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Integrate Sonar Qube              |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Jenkins for Docker Orchestration  |
|----------------------+------------------------+-----------------------------------|
|                      |                        | Everithing in Docker !!           |
|----------------------+------------------------+-----------------------------------|
|                      | Linting and formatting |                                   |
|----------------------+------------------------+-----------------------------------|
|                      | CV                     |                                   |
|----------------------+------------------------+-----------------------------------|
| Publishing to docker |                        |                                   |
|----------------------+------------------------+-----------------------------------|
| Secure Jenkins       |                        |                                   |
|----------------------+------------------------+-----------------------------------|
| Fix the code         |                        |                                   |
|----------------------+------------------------+-----------------------------------|

* - Architecture Diagram
  [[https://viewer.diagrams.net/?highlight=0000ff&edit=_blank&layers=1&nav=1#R7Vrdc9o4EP9reISxJduYRxJCOze9Tq9pJ9enjLCF0SFbnC0K3F9%2FK1sGf4iYdIAmk%2FAA0kqW1ru%2F%2FZLo4dt4%2ByElq8WfIqS8h6xw28OTHkK%2B58K3IuwKguN5BSFKWViQ7APhnv1HNdHS1DULaVabKIXgkq3qxEAkCQ1kjUbSVGzq0%2BaC13ddkYi2CPcB4W3qAwvlQr%2BWax3oHymLFuXOtqVHYlJO1oRsQUKxqZDwXQ%2FfpkLIohVvbylXsivlUjw3PTK6ZyyliTzlAUlpPP0kPzP%2BfRcHLHjYsmVfr%2FKT8LV%2BYc2s3JUSSMU6CalaxOrhm82CSXq%2FIoEa3YDKgbaQMYeeDU29HE0l3R7l096%2FPaCGipjKdAdT9API0QLblUjQ%2Fc1B%2Fm4p1EVF9sjTRKJ1Hu3XPogFGloyz5AS7pZSSLLFXkhiLTlL6O0ek1ZdSoSzKIF2ACKhKRA4mVH%2BRWRMMlEbUJJkgMZPjQkzIaWIKxPGekkplEYAayvFWLyNlFUONnTGRSSyQcTkYj07g5aGdSWBRgZuS01Dt62lknZ2JTkGJXkcdr2ZC3inqra8f9eiHOhnuc8ZwwTbX20Pg9CK9G%2B%2ByqwkfGDyo5KhR2Il62SWrSrTgPdZ81GgFTyU5AZ4QA2yjpBMpmIJAOICUDBJREIVu4zzBqmFpCYeYhaGahuj4dZNW7FYLt9DGE2wC42z2LTtDZBbAwxGQwNgbH8Po5plX8qw3W7DLk1pzul2rAIKSIQmoW5OAk6yjAUmL0jDVmhpyAtiGUkjKrtcT1uuVV9ocIUlLaWcSPazzoZJinqHL4LlplK6Ytyw8lFjiUys04Dqp6qxp7GQ4zYXami0kENroVyp%2B9f%2BdT17p%2BuZxXlGUFWn2cd2uubcqd%2BQYBnldlYxrXn%2BgSn5ZuNsdYgSpOzM2VZZ5o3mZ7KQUqU8YyUbNA3CxBkwSHrmDCw4HQSwI5qGRBL4UfQMfnOX35%2BlJAkzBfUpAh85%2FYcmS5ZkfRv5g1USXdbwHdcZuE4jVIwMlu%2F5bRSXtLOb%2FbArVMwLN3kIBt9YDFkosj7TDXx%2FFTFJqpGiO7Yg56TY8kehnPdg8hSmPL%2BJKXM0cUxJ4qVCyegoploaPAayr1B1bMiuBixl0v0CS2lQm113CGoKpHdCRJySFcu0RwgymDKdk5hxJSrDDgVrD3S2EGJ5FGMmOL5I3J0jWfGbua3JYV0VXGU1%2FFQAMxYddRWAIWLbwWA8%2BKZWsPximdFSXEX5Cj%2B6nLdR2dfcGgPdSgV%2Fmt79hMWyEkGNOoZsMmcQLGiw5CyTj4HISnsyRdcq1C4f12zXNZVAhrg2vFRcs08o54%2BIuTiasJrA6LLmcxeuRhC3YNaEhZjPWUDB5SUBXYEbBK4uq37PsgcOaqgfm9Q%2FHFgGBPjoUgg44aji1WW6Vmemm4mAEd6PachIH9mWUya7xcBjPvBY66jk%2BDEUwZKm1VT4cpjBVuNcC%2FsGwIyGbbSUtPOjxZS0NNByvlq3KBafYEdXaZ01sW2ZBX2dohiP6nrEuBH1Ty6KGwedyL9uUYxOSCq6tE%2B3TP5daf%2FQxq3ak221s6slaNfFyxHDvA5eHA9SBTw6fLy61r19dvlcAOGRX18KuQPLtYcYj%2FBoiH3vunA6Ifk4FU7WyXAC0KS7PQJV50e1c3go7%2F1OEP7Wk7w3A0JkAOHrKcPvRUJS2O6v9Yy%2B1%2BJ5jEStOgt5razJv2Yxjkw59uvB2PeEKZa%2B0UwyyHnfUaYOePap%2BIsB2fHrzNcAskleWL2DSwVI6%2BWB6xn3nu%2BnBFc9JRjajeqyBEEHVpq14%2Fmw0nlZ9uy7rxflqcZpoLxAINcpfeI%2FHW%2F7yg01zjycNiiveh%2BC%2FC5QviSIlayxknCzKwxjzGegFQGtKaiNVq99mSFYvnEMojoGh20M2mcCIXQP%2F8ssStPDn1vx3f8%3D][Link to architecture diagram in Diagrams.net]]

  [[file:images/diagram.png]]

* - Process Flow
  [[https://viewer.diagrams.net/?highlight=0000ff&edit=_blank&layers=1&nav=1&title=Untitled%20Diagram.drawio#R3VjbctowEP0aHtvxBRvnsUAuL51Jhuk0eeoIe7HVyJZHloPJ13dly%2FgiUiidDJPwANpd7Uo6Z48MTNxFWt0KkiffeQRs4lhRNXGXE8cJfA%2FflWPXODwraByxoFHjsjvHir6CdlraW9IIisFEyTmTNB86Q55lEMqBjwjBt8NpG86Gq%2BYkBsOxCgkzvT9pJBN9LM%2Fq%2FHdA46Rd2bZ0JCXtZO0oEhLxbc%2FlXk%2FcheBcNqO0WgBT2LW4NHk3b0T3GxOQyVMSHir37ml24%2FxIlr%2Br11%2F266J4%2FKKrvBBW6gPrzcpdiwBWQbDRmG8TKmGVk1BFtkg3%2BhKZMrRsHJIibxjY0Apw0fmGMrbgjIu6kBsRCDYh%2Bgsp%2BDP0In4YwHqDEb0bEBKqN49p78HDpgOeghQ7nNImtATohrN9bW87%2Blr2kh5zrY%2Fohon3lTtMcaBh%2FQeI3RMgzqJvqlfRChkpChoOkW0SIDJa9SgoJx5aACOSvgzLH0JCr3DPKS7cYe6NMA%2BmX71hkYKXIgSd1%2B%2FScamro6UkETFIo1RNzv7o5%2FPlGXzdl3XWRvB04vgkVX2frYu8ZsZniOV8LXAUq9EtlUm5rjHNuRneYljxAuuE82ejEwQvs0iJZ2kdF9xl9DUmyPMMfdnOgV7z30tg%2FucXmGubqgjOE5h7QKujUu8ssJnB17yk%2BFjGDeR5p7ORcJrzYbgsaBbj55KHzyBQA2CK8sOpymDl4qoKPr%2BqpjNTCjPf6l7OeRLzDqj1b3XfWW9XBpPXFYSlhPprc6Q%2BSEbYrqBFDb16QI3VN5bYimcEg9ZDuYYPKDeDoYvLrd3QiCX1cwcKWd94Hw5lf6yvy6M8%2Ff9bDSoqH3vjJ8UAfkdtrGWlCamNXWtkuPvHvtHLUmaXVltt3qk3KB6geTwevQWau%2BZoI17sSg6GLeMEo1Y4%2BQ52R4XcUaGzL100ux%2FtzfTunw%2F3%2Bg8%3D][Link to process flow in Diagrams.net]]

  [[file:images/process-flow.png]]

* - Repository
  https://github.com/albertoefguerrero/DOTT

* Learn about go toolchain

- Setting up GO environment variables (should be done with root)

#+begin_src shell
export GOPATH=~/go
export GOBIN=$GOPATH/bin
export PATH=$PATH:$GOBIN
#+end_src


* Play with code from repository
- Proper goop repository is ~~github.com/karmakaze/goop~. Should change in Dockerfile
#+begin_src shell
go get github.com/karmakaze/goop # should be run as root
goop install
goop go run api.go convert.go
#+end_src


- Ash is the alpine shell

- The port is defined in ~main()~ in line 66 of file api.go, this should be a variable, not hardcoded
#+begin_src go
log.Fatal(http.ListenAndServe(":8000", router))
#+end_src

- Test are run like this
#+begin_src shell
go get github.com/stretchr/testify/assert
goop go test
#+end_src

* Jenkins with Go
  https://plugins.jenkins.io/golang/

* Installing and running Docker on CentOS 7

  #+begin_src shell
sudo yum -y update
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install docker-ce docker-ce-cli containerd.io
sudo systemctl start docker
# sudo docker run hello-world # only to test
  #+end_src

* Building Dockerfile and running

#+begin_src shell
docker build -t gom .
docker run -ti -p 8000:8000 gom
#+end_src

exec commands
#+begin_src
docker exec -it <container> <command>
#+end_src

* Fixed Dockerfile
Testify required Go 1.13+ so using a newer image of golang
Mux required GCC so it was added too

#+begin_src Dockerfile
FROM golang:1.15-alpine

ENV GOPATH=/go:/app
RUN apk add --update git
RUN apk add build-base
WORKDIR /app

COPY Goopfile Goopfile
RUN go get github.com/karmakaze/goop \
    && go get github.com/gorilla/mux \
    && go get github.com/stretchr/testify/assert \
    && goop install

COPY . .
CMD ["ash", "-c", "goop go run api.go convert.go"]
# docker build -t gom .
# docker run -ti -p 8000:8000 gom
#+end_src

* Jenkins with BlueOcean
It is really easy to create a Pipeline with Jenkins and BlueOcean

** Installing with docker
We can install BlueOcean and jenkins with Docker
#+begin_src shell
docker run -p 8080:8080 jenkinsci/blueocean
#+end_src

-The documentation for [[https://hub.docker.com/r/jenkinsci/blueocean][the blue ocean docker]]

** Webhook
- [[https://dzone.com/articles/adding-a-github-webhook-in-your-jenkins-pipeline][Adding a GitHub Webhook in Your Jenkins Pipeline]]
- [[https://jayd.ml/jenkins/2019/03/05/jenkins-pipeline-webhooks.html][How to get Jenkins Blue Ocean Github Webhooks to Work]]
- [[https://medium.com/@joydeep56053/continuous-integration-using-jenkins-blueocean-github-ubuntu-robotframework-5b800ae1df8c][Continuous Integration using Jenkins BlueOcean + Github + Ubuntu & Robot Framework]]

- [[https://plugins.jenkins.io/multibranch-scan-webhook-trigger/][Plugin for webhook]]

- Example of URL with token named token-test
#+begin_src
http://3.129.89.220:8081/multibranch-webhook-trigger/invoke?token=token-test
#+end_src


** Creating a Pipeline
- [[https://www.jenkins.io/doc/book/blueocean/creating-pipelines/][Creating a Pipeline with BlueOcean]]
- [[https://www.jenkins.io/doc/book/blueocean/pipeline-editor/][BlueOcean Pipeline Editor]]
- [[https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token][Documentation to create a Github personal access token]]
- [[https://www.jenkins.io/doc/book/pipeline/syntax/][Jenkinsfile Pipeline syntax]]

* DO NOT USE. Creating a custom Dockerfile with Jenkins, BlueOcean, Go and dependencies
#+begin_src Dockerfile
FROM jenkinsci/blueocean
USER root
RUN apk add --no-cache git make musl-dev go

# Configure Go
ENV GOROOT /usr/lib/go
ENV GOPATH /go
ENV PATH /go/bin:$PATH
ENV GOBIN $GOPATH/bin

RUN mkdir -p ${GOPATH}/src ${GOPATH}/bin

RUN go get github.com/karmakaze/goop \
    && go get github.com/gorilla/mux \
    && go get github.com/stretchr/testify/assert \
    && go get github.com/pkg/errors
#+end_src

With inspiration from [[https://stackoverflow.com/a/53405005][here]] and [[https://fukubaka0825.medium.com/how-to-resolve-the-trouble-occurred-when-i-install-go-into-the-alpine-image-3c1e84f2315a][here]] and [[https://stackoverflow.com/a/56613664][here]]


* Custom Dockerfile with Jenkins BlueOcean and Docker

#+begin_src Dockerfile
FROM jenkinsci/blueocean
USER root
RUN apk add --no-cache git make musl-dev
RUN apk add --update docker openrc
RUN rc-update add docker boot
RUN addgroup username docker
RUN apk add docker-compose
#+end_src

#+begin_src shell
docker run -it -v "/var/run/docker.sock:/var/run/docker.sock:rw" image-name /bin/sh
#+end_src

https://stackoverflow.com/questions/54099218/how-can-i-install-docker-inside-an-alpine-container
https://wiki.alpinelinux.org/wiki/Docker#Installation
https://stackoverflow.com/questions/28302178/how-can-i-add-a-volume-to-an-existing-docker-container

** Running Custom Docker image
- To create the image we do (Make sure the Dockerfile is in path)
#+begin_src shell
docker build -t custom .
#+end_src

- To run the image we do
#+begin_src shell
docker run -p 8000:8000 -p 8080:8080 custom
#+end_src


export JAVA_HOME=/opt/java/current && export PATH=$PATH:$JAVA_HOME/bin &&

export JAVA_HOME=/usr/lib/jvm/java-11-openjdk && export PATH="$JAVA_HOME/bin:${PATH}" &&
docker run --network=host -e SONAR_HOST_URL='http://albertoefg1c.mylabserver.com:9090' --user="$(id -u):$(id -g)" -v "$PWD:/usr/src" sonarsource/sonar-scanner-cli

http://pietervogelaar.nl/jenkinsfile-docker-pipeline-multi-stage

https://www.kabisa.nl/tech/running-multiple-docker-containers-in-parallel-with-jenkins/

https://stackoverflow.com/questions/49782267/running-multiple-docker-containers-from-a-single-jenkinsfile

** This will create a new Jenkins instance, we have to setup credentials again.
** Crate an image out of custom image with all credentials

** jenkins with docker https://medium.com/@karthi.net/docker-tutorial-build-docker-images-using-jenkins-d2880e65b74

** Integrating SonarQube and Jenkins https://aspiresoftware.in/blog/intergrating-sonarqube-and-jenkins/
** SonarScanner for Jenkins https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/
** Try Out SonarQube https://docs.sonarqube.org/latest/setup/get-started-2-minutes/
** Dockerhub - SonarQube https://hub.docker.com/_/sonarqube/
** SonarQube - Docker installation https://techexpert.tips/sonarqube/sonarqube-docker-installation/
** Prerequisites and Overview https://docs.sonarqube.org/latest/requirements/requirements/
Hardware Requirements
A small-scale (individual or small team) instance of the SonarQube server requires at least 2GB of RAM to run efficiently and 1GB of free RAM for the OS. If you are installing an instance for a large teams or Enterprise, please consider the additional recommendations below.
The amount of disk space you need will depend on how much code you analyze with SonarQube.
SonarQube must be installed on hard drives that have excellent read & write performance. Most importantly, the "data" folder houses the Elasticsearch indices on which a huge amount of I/O will be done when the server is up and running. Great read & write hard drive performance will therefore have a great impact on the overall SonarQube server performance.
SonarQube does not support 32-bit systems on the server side. SonarQube does, however, support 32-bit systems on the scanner side.
** TODO Keep the app running
** TODO Docker code in an external

* Sonar Qube
  #+begin_src shell
docker run -d --name sonarqube \
    -p 9000:9000 \
    -e SONAR_JDBC_URL=... \
    -e SONAR_JDBC_USERNAME=... \
    -e SONAR_JDBC_PASSWORD=... \
    -v sonarqube_data:/opt/sonarqube/data \
    -v sonarqube_extensions:/opt/sonarqube/extensions \
    -v sonarqube_logs:/opt/sonarqube/logs \
    sonarqube
  #+end_src

  docker run -d --name sonarqube3 -p 9090:9000 -p 9092:9092 -v sonarqube-conf:/opt/sonarqube/conf -v sonarqube-data:/opt/sonarqube/data -v sonarqube-logs:/opt/sonarqube/logs -v sonarqube-extensions:/opt/sonarqube/extensions sonarqube

** Sonar Scanner
#+begin_src shell
       docker run --rm --network host \
              -e SONAR_HOST_URL="http://3.138.247.153/" \
              -e SONAR_LOGIN="99a7536d3c88fc79e7f1dd189f99b4cf59926cc6" \
              -v "/var/jenkins_home/workspace/DOTT_master/cidr_convert_api/go/" \
              sonarsource/sonar-scanner-cli -X
#+end_src

--network host -e SONAR_HOST_URL="http://3.138.247.153/" -e SONAR_LOGIN="99a7536d3c88fc79e7f1dd189f99b4cf59926cc6" -v "/var/jenkins_home/workspace/DOTT_master/cidr_convert_api/go/"


#+begin_src shell
sonar-scanner \
  -Dsonar.projectKey=test-key1 \
  -Dsonar.sources=. \
  -Dsonar.host.url=http://3.22.117.110 \
  -Dsonar.login=test
#+end_src



* - Notes
- [[https://www.redhat.com/architect/diagramming-tools-cloud-infrastructure][6 architectural diagramming tools for cloud infrastructure]]
- [[https://gitlab.com/redhatdemocentral/portfolio-architecture-examples][Portfolio Architecture Examples]]
- [[https://docs.microsoft.com/en-us/azure/devops/learn/agile/what-is-kanban][What is Kanban]]
- [[https://www.redhat.com/en/blog/integrating-ansible-jenkins-cicd-process][Integrating ansible with jenikns in a CI/CD process]]
- [[https://www.bantrain.com/how-to-setup-sonarqube-jenkins/][How to Setup Sonarqube & Jenkins]]

- jenkins and golang  https://plugins.jenkins.io/golang/
- goop https://github.com/karmakaze/goop
- goop error https://github.com/petejkim/goop/issues/44
- goop manual https://nicedoc.io/petejkim/goop
- Go environment error https://stackoverflow.com/q/18149601
- Go environment variables  https://stackoverflow.com/a/49595197
- Go tests error ~error during install strechr/testify, undefined: errors.Is~
  https://github.com/stretchr/testify/issues/991
  Fix with Go 1.13
- [[https://www.scalyr.com/blog/create-docker-image/][How To Create A Docker Image From A Container]]
